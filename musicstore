----create database musicstore 

----1. Who is the senior most employee based on job title?

--select * from employee 
--where title like '%senior%'

--Which countries have the most Invoices?




--select sum(total)as total ,billing_country 
--from invoice 
--group by billing_country 
--order by total desc


--What are top 3 values of total invoice?

--select sum(total)as total ,invoice_id
--from invoice 
--group by invoice_id
--order by total desc

--Which city has the best customers? We would like to throw a promotional Music Festival in the city 
--we made the most money. Write a query that returns one city that has the highest sum of invoice totals.
--Return both the city name & sum of all invoice totals





--select top 1 sum(total)as total ,billing_city
--from invoice 
--group by billing_city
--order by total desc



--Who is the best customer? The customer who has spent the most money will be declared the best customer.
--Write a query that returns the person who has spent the most money




--select top 1 sum(total)as total ,customer_id
--from invoice 
--group by customer_id
--order by total desc


--1. Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
--Return your list ordered alphabetically
--by email starting with A

--select customer.email,customer.first_name,customer.last_name ,genre.name as"genre name"
--from invoice join customer on invoice.customer_id = customer.customer_id 
--join invoice_line on invoice_line.invoice_id = invoice.invoice_id 
--join  track on invoice_line.track_id = track.track_id join genre 
--on track.genre_id = genre.genre_id 
--where genre.name = 'rock'
--group by email,first_name ,last_name ,genre.name





--2. Let's invite the artists who have written the most rock music in our dataset. 
--Write a query that returns the Artist name and total track count of the top 10 rock bands

select artist.artist_id , artist.name as"artist name" , count(genre.name)  as "brand count"
from artist join album on artist.artist_id = album.artist_id 
join track on album.album_id = track.album_id 
join genre on track.genre_id = genre.genre_id 
where genre.name = 'rock'
group by artist.artist_id , artist.name
order by [brand count] desc 


--Return all the track names that have a song length longer than the average song length. Return the Name and
--Milliseconds for each track. Order by the song length with the longest songs listed first


select track.name , track.milliseconds 
from track 
where  milliseconds >  (select    cast ( avg(track.milliseconds)as int) as "average" 
from track )
order by milliseconds desc 

